trigger:
- master

pool:
  name: 'Linux-Latest'  # Default pool for Linux

variables:
  projects: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'drop'  # Define the artifact name
  dockerImageName: 'testprojectcicd.azurecr.io/yourimage'  # Replace with your ACR login server and image name
  dockerImageTag: '$(Build.BuildId)'  # Use the build ID as the tag

jobs:
- job: BuildAndTest
  displayName: 'Build and Test'
  pool:
    name: 'Linux-Latest'  # Default pool for Linux

  steps:
  - checkout: self
    displayName: 'Git Checkout'
  
  - script: |
      echo "Cleaning up old build artifacts and temporary files..."
      rm -rf $(Build.ArtifactStagingDirectory)/*
    displayName: 'Clean up old build artifacts and temporary files'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - powershell: |
      Write-Host "Cleaning up old build artifacts and temporary files..."
      Remove-Item -Path "$(Build.ArtifactStagingDirectory)\*" -Recurse -Force
    displayName: 'Clean up old build artifacts and temporary files'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows'))

  - task: UseDotNet@2
    displayName: 'Install .NET SDK 8.0'
    inputs:
      packageType: 'sdk'
      version: '8.0.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      projects: '$(projects)'

  - task: DotNetCoreCLI@2
    displayName: 'Build the project'
    inputs:
      command: 'build'
      projects: '$(projects)'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests and collect coverage'
    inputs:
      command: 'test'
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --collect:"Code Coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Publish the project'
    inputs:
      command: 'publish'
      projects: '$(projects)'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      publishWebProjects: false  # Disable web project detection

  - task: PublishBuildArtifacts@1
    displayName: 'Publish the artifact to drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(artifactName)'
      publishLocation: 'Container'

  - task: Docker@2
    displayName: 'Build and push Docker image to ACR'
    inputs:
      containerRegistry: 'MyACRconnection'  # Use the name of your service connection
      repository: 'testprojectcicd/yourimage'  # ACR repository path (without the ACR login server)
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'  # Ensure the path to the Dockerfile is correct
      tags: |
        $(dockerImageTag)  # Just the tag without the image name
