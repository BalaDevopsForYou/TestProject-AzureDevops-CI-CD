trigger:
- master

pool:
  name: 'Linux-Latest'  # Name of the self-hosted agent pool
  demands:
    - Agent.Name -equals LinuxVM  # Specifies the agent name within the pool (optional)

variables:
  projects: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'drop'  # Define the artifact name

steps:
- checkout: self
  displayName: 'Checkout source code'

- script: |
    echo "Cleaning up old build artifacts and temporary files..."
    rm -rf $(Build.ArtifactStagingDirectory)/*
  displayName: 'Clean up old build artifacts and temporary files'

- task: UseDotNet@2
  displayName: 'Install .NET SDK 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: 'Build the project'
  inputs:
    command: 'build'
    projects: '$(projects)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests and collect coverage'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"Code Coverage"'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project'
  inputs:
    command: 'publish'
    projects: '$(projects)'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false  # Disable web project detection

- task: PublishBuildArtifacts@1
  displayName: 'Publish the artifact to drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(artifactName)'
    publishLocation: 'Container'
